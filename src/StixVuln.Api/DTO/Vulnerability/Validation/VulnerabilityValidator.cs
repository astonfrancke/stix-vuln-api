using FluentValidation;

namespace StixVuln.Api.DTO.Vulnerability.Validation;

public class CreateVulnerabilityValidator : AbstractValidator<CreateVulnerabilityDTO>
{
    public CreateVulnerabilityValidator()
    {
        RuleFor(vulnerability =>  vulnerability.Name).NotNull().NotEmpty();
        RuleForEach(vulnerability => vulnerability.ExternalReferences).SetValidator(new ExternalReferenceRequestValidator());
    }
}

public class UpdateVulnerabilityValidator : AbstractValidator<UpdateVulnerabilityDTO>
{
    public UpdateVulnerabilityValidator()
    {
        RuleFor(vulnerability => vulnerability.Name).NotNull().NotEmpty();
        RuleForEach(vulnerability => vulnerability.ExternalReferences).SetValidator(new ExternalReferenceRequestValidator());
    }
}

public class ExternalReferenceRequestValidator : AbstractValidator<ExternalReferenceRequestDTO>
{
    public ExternalReferenceRequestValidator()
    {
        RuleFor(exRef => exRef.SourceName).NotNull().NotEmpty();
        RuleFor(exRef => new { exRef.Description, exRef.Url, exRef.ExternalId })
            .Must(x => (x.Description != null || x.Url != null || x.ExternalId != null))
            .WithMessage("At least one of the description, url, or external_id properties must be present");
    }
}
