using StixVuln.SharedKernel;

namespace StixVuln.Core.Vulnerability;

public class Vulnerability : StixDomainObject
{
    public override string Type => "vulnerability";
    public string Name { get; }
    public string Description { get; }
    private readonly List<ExternalReference> _externalReferences = new();
    public IEnumerable<ExternalReference> ExternalReferences => _externalReferences.AsReadOnly();
    public string? Identity { get; }

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public Vulnerability() { }
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    public Vulnerability(string name, string description, string? identity)
    {
        if (string.IsNullOrEmpty(name))
        {
            throw new ArgumentNullException("Name is required");
        }

        Name = name;
        Description = description;
        Identity = identity;
        Created = DateTime.UtcNow;
        Modified = DateTime.UtcNow;
    }

    public void AddExternalReference(
        string sourceName,
        string? description,
        string? externalId,
        string? url,
        string? hash)
    {
        _externalReferences.Add(new ExternalReference(
            sourceName,
            description,
            externalId,
            url,
            hash));
    }
}
