using StixVuln.SharedKernel;

namespace StixVuln.Core.Vulnerability;

public class Vulnerability : StixDomainObject
{
    public override string Type => "vulnerability";
    public string Name { get; private set; }
    public string Description { get; private set; }
    private readonly List<ExternalReference> _externalReferences = new();
    public IEnumerable<ExternalReference> ExternalReferences => _externalReferences.AsReadOnly();

#pragma warning disable CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.
    public Vulnerability() { }
#pragma warning restore CS8618 // Non-nullable field must contain a non-null value when exiting constructor. Consider declaring as nullable.

    public Vulnerability(
        string name, 
        string description, 
        string? identity)
    {
        if (string.IsNullOrEmpty(name))
        {
            throw new ArgumentNullException("Name is required");
        }

        Name = name;
        Description = description;
        CreatedByRef = identity;
        
        var now = DateTime.UtcNow;
        Created = now;
        Modified = now;
    }

    public void UpdateNameAndDescription(string name, string description)
    {
        if (string.IsNullOrEmpty(name))
        {
            throw new ArgumentNullException("Name is required");
        }

        Name = name;
        Description = description;
    }

    public void SetExternalReferences(
        List<ExternalReference> externalReferences)
    {
        if (externalReferences == null)
        {
            throw new ArgumentNullException("External references cannot be null");
        }

        _externalReferences.Clear();
        _externalReferences.AddRange(externalReferences);
    }
}
